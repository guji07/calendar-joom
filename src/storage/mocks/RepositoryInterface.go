// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "cryptoColony/src/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterface struct {
	mock.Mock
}

// ChangeUserEventStatus provides a mock function with given fields: ctx, eventID, userID, status
func (_m *RepositoryInterface) ChangeUserEventStatus(ctx context.Context, eventID int, userID int, status model.InvitationStatus) (model.UserEvent, error) {
	ret := _m.Called(ctx, eventID, userID, status)

	var r0 model.UserEvent
	if rf, ok := ret.Get(0).(func(context.Context, int, int, model.InvitationStatus) model.UserEvent); ok {
		r0 = rf(ctx, eventID, userID, status)
	} else {
		r0 = ret.Get(0).(model.UserEvent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, model.InvitationStatus) error); ok {
		r1 = rf(ctx, eventID, userID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEvent provides a mock function with given fields: ctx, user
func (_m *RepositoryInterface) CreateEvent(ctx context.Context, user model.Event) (int64, error) {
	ret := _m.Called(ctx, user)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.Event) int64); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Event) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *RepositoryInterface) CreateUser(ctx context.Context, user model.User) (int, error) {
	ret := _m.Called(ctx, user)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.User) int); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUsersEvents provides a mock function with given fields: ctx, usersEvents
func (_m *RepositoryInterface) CreateUsersEvents(ctx context.Context, usersEvents []model.UserEvent) error {
	ret := _m.Called(ctx, usersEvents)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.UserEvent) error); ok {
		r0 = rf(ctx, usersEvents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvent provides a mock function with given fields: ctx, eventID
func (_m *RepositoryInterface) GetEvent(ctx context.Context, eventID int) (model.Event, error) {
	ret := _m.Called(ctx, eventID)

	var r0 model.Event
	if rf, ok := ret.Get(0).(func(context.Context, int) model.Event); ok {
		r0 = rf(ctx, eventID)
	} else {
		r0 = ret.Get(0).(model.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByUserIDs provides a mock function with given fields: ctx, userID, from, to
func (_m *RepositoryInterface) GetEventsByUserIDs(ctx context.Context, userID []int, from time.Time, to time.Time) ([]model.Event, error) {
	ret := _m.Called(ctx, userID, from, to)

	var r0 []model.Event
	if rf, ok := ret.Get(0).(func(context.Context, []int, time.Time, time.Time) []model.Event); ok {
		r0 = rf(ctx, userID, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int, time.Time, time.Time) error); ok {
		r1 = rf(ctx, userID, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserExist provides a mock function with given fields: ctx, userID
func (_m *RepositoryInterface) IsUserExist(ctx context.Context, userID int) (bool, error) {
	ret := _m.Called(ctx, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryInterface creates a new instance of RepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryInterface(t mockConstructorTestingTNewRepositoryInterface) *RepositoryInterface {
	mock := &RepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
